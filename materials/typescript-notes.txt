Type script and ES 6:
.....................

Lab:

node js -12.x

npm

vs code 
///////////////////////////////////////////////////////////////////////////////////////////////////////

What is javascript ?

Javascript is object based,function style,event driven programming language.

Language learning path:

1.language fundamentals
2.functions
3.object based concepts and implementation
4.Dom programming
5.networking - ajax


Type script:

What is it?

Typed JavaScript at Any Scale.

Typed: data type

Java script is fundamentally is dynamic typed  / weak typed programming language.

The type of variable is not known during compile time of the programm rather known during runtime.

eg:

int a=10; strong typed /static typing

a="hello" ; compil time error

keyword a =10 ; dynamic typed/weak typed;

a ="hello" - no error

Drawbacks of dynamic typed programming languages-javascript:
.............................................................

1.type collation - which wont give confidence when you build enterprise application.


What if if you want strong typing in javascript?

 Javascript language cant be changed. we can add wrapper on top of that.
That is birth of type script.

History of type script:

2009, The project was started to make javascript looks like other object oriented langugages
 - classes,interfaces.... : coffee script.

source code would be coffee script
 
 Customer.coffee            
  class,interfaces --compile    --Customer.js

2010, Microsoft started project to create object oriented javascript using C#


ECMA Standards:
 ES 1,3,4,5
 ES 6

2009, The project was started to make javascript looks like other object oriented langugages
 - classes,interfaces.... : coffee script.

source code would be coffee script
 
 Customer.coffee            
  class,interfaces --compile    --Customer.js

2010, Microsoft started project to create object oriented javascript using C#

static typed javascript.

 C# ---compiler------plain javascript.

Problems with C#
 1.PORTABLITY.
 2.COMPLEXITY

2012, ecma committe published a specfication, ECMA 6 spec
ES 6 Features:
 1.classes
 2.let,const
 3.new literal types
 4.arrow function
 5.new Objects - Promise....
 etc.......

MS Started redesigning the whole project, target ecma 6 as base language.

 ES 6 + Static Typing + added new extra fetures => The brith of Typescript.


Typescript----compile----Plain javascript

Typescript is strongly typed, object oriented  javascript.

Now you can use type script to build better object oriented systems using javascript.


TS is not compititor or replacer for javascript but it complements js.

////////////////////////////////////////////////////////////////////////////////////////////////////////

We are going to build Object oriented Javascript applications using type script language


By understanding JavaScript, TypeScript saves you time catching errors and providing fixes before you run code.

Any browser, any OS, anywhere JavaScript runs. Entirely Open Source.


Object Oriented Principles:
 
1.Abstraction
2.Encaspulation
3.Modualirty
    -breaking the code 
4.Typing
   -polyphism
      -compile - strongly typed
      -runitme - strong typed
5.Hierachy
   -has-a
   -is-a : inheritance
................
6.Concurrency
7.Persistency.


if any programming language follows the first 5 principles 100%, those languages are 
called as "Object oriented Programming" languages

if any language does not implement any one principle or partially, those languages are 
called "Object based language"


Lab :

1.nodejs
2.ts compiler 
3.editor - vs code

select your work-dire

>mkdir mytsapps

cd mytsapps

mytsapps> npm init

mytsapps> code .

........................................................................................
........................................................................................

TS Compiler:

mytsapps>npm install typescript --save-dev


How to write ts code , compile?

fileName.ts

compiler - tsc

tsc folder/fileName.tsc
tsc src/index.tsc

package.json 
 scripts section

scripts is for java script automation.

scripts: {
 "command" : "Task to executed"
}

if you run the command the task will be executed.

commands are provided by npm by default , those are built in commands
"start"
"test"
"install"
 ........

task:
 "start" : "node index.js"
 
npm start ----->

commands can even be custom commands

"subu"  : "node index.js"

npm run subu

I m going to automate typescript compilation using npm script.

"build": "tsc src/index.ts"

//////////////////////////////////////////////////////////////////////////////////////////

package.json
{
  "name": "mytsapps",
  "version": "1.0.0",
  "description": "",
  "main": "index.js",
  "scripts": {
    "build" : "tsc src/index.ts"
  },
  "author": "",
  "license": "ISC",
  "devDependencies": {
    "typescript": "^3.9.5"
  }
}


how to run?

 >npm run build

Execution:

 -on node

  >node src/index.js

browser:
 index.html
   <script src="src/index.js"></script>
////////////////////////////////////////////////////////////////////////////////////////////


vscode tips:

1.save :  file --autosave

2.extensions :
//////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////

Variable declrations,data types,literals:
........................................
var - ES 5
let,const - ES 6


Type script compile ts file into javascript.

The problems with ES 6:

When es6 was introduced, the node and browsers vendors were not ready to accept
es6 keywords
 let ,const never work in older node and browsers.

that time browers were supported only ES 5 version of js.

browsers were not ready that time, but develoers felt,and supported lot on es6.

Then how to run es 6 code on browsers which dont support.

The birth of "Transpilers"  : a special compilers which converts es6 to es5,

developer write code in es6 ---->transpiler-->es 5

eg: babel.js 
 higer version -to lower version
eg : tsc
 es6 to es5
 +
 type verification

         "ts compiler by default converts es6 code into es5."

let---------var

what if i dont to convert es6 to es 5, i want to keep same version?

////////////////////////////////////////////////////////////////////////////////////////

//literals -keyword
//firstName variable
//"Subramanian" is literal
//var firstName="Subramanian";
let firstName = "Subramanian";
console.log(`First Name ${firstName}`);

////////////////////////////////////////////////////////////////////////////////////////

Type compiler by default converts(transpil/compile) typescript code  into es 5 only.

what if i want to keep es 6 syntax only in compiled code?


Object Oriented Principles:
 
1.Abstraction
2.Encaspulation
3.Modualirty
    -breaking the code 
4.Typing
   -polyphism
      -compile - strongly typed
      -runitme - strong typed
5.Hierachy
   -has-a
   -is-a : inheritance
................
6.Concurrency
7.Persistency.

if any programming language follows the first 5 principles 100%, those languages are 
called as "Object oriented Programming" languages

if any language does not implement any one principle or partially, those languages are 
called "Object based language".

/////////////////////////////////////////////////////////////////////////////////////////

Type scrit is a typed superset of javascript that compiles to plain javascript

                  any browser,an host, any os, any device

///////////////////////////////////////////////////////////////////////////////////////////

Lab :

1.nodejs
2.ts compiler 
3.editor - vs code

select your work-dire

>mkdir mytsapps

cd mytsapps

mytsapps> npm init

mytsapps> code .

........................................................................................

TS Compiler:

mytsapps>npm install typescript --save-dev


How to write ts code , compile?

fileName.ts

compiler - tsc

tsc folder/fileName.tsc
tsc src/index.tsc

package.json 
 scripts section

scripts is for java script automation.

scripts: {
 "command" : "Task to executed"
}

if you run the command the task will be executed.

commands are provided by npm by default , those are built in commands
"start"
"test"
"install"
 ........

task:
 "start" : "node index.js"
 
npm start ----->

commands can even be custom commands

"subu"  : "node index.js"

npm run subu

I m going to automate typescript compilation using npm script.

"build": "tsc src/index.ts"

//////////////////////////////////////////////////////////////////////////////////////////

package.json
{
  "name": "mytsapps",
  "version": "1.0.0",
  "description": "",
  "main": "index.js",
  "scripts": {
    "build" : "tsc src/index.ts"
  },
  "author": "",
  "license": "ISC",
  "devDependencies": {
    "typescript": "^3.9.5"
  }
}


how to run?

 >npm run build

Execution:

 -on node

  >node src/index.js

browser:
 index.html
   <script src="src/index.js"></script>
////////////////////////////////////////////////////////////////////////////////////////////


vscode tips:

1.save :  file --autosave

2.extensions :
//////////////////////////////////////////////////////////////////////////////////////////////

Compiler options: Advanced:
............................

Use case:

Separate sourcode and compiled code into different directories.

source code
 src
   -index.ts

 build
    -index.js

how to tell the compiler to place compiled code into build folder.

compiler options:

 syntax

  tsc --compileroptions filename

  tsc --outDir build   src/index.ts


{
  "name": "mytsapps",
  "version": "1.0.0",
  "description": "",
  "main": "index.js",
  "scripts": {
    "build" : "tsc --outDir build   src/index.ts"
  },
  "author": "",
  "license": "ISC",
  "devDependencies": {
    "typescript": "^3.9.5"
  }
}

********************************************************************************************
How to compile the code automatically ,without compiling code manually?
 we compiler option 
   --watch


 "scripts": {
    "build" : "tsc --watch --outDir build   src/index.ts"
  }

npm run build

**************************************************************************************

what if i want to add more and more compiler options


tsc --watch --outDir build  --options --options  src/index.ts
  
 This is not scaleable, and maintainable. , if configuration grows.

Solution : 
 we need to create simple ts config file where you can place all configurations.

create file called
 tsconfig.json outside src folder, where we can tell all compiler options


{
    "compilerOptions": {
        "outDir": "build",
        "watch": true
    },
    "files": [
        "src/index.ts"
    ]
}
    "build" : "tsc"

////////////////////////////////////////////////////////////////////////////////////////////

Variable declrations,data types,literals:
........................................
var - ES 5
let,const - ES 6


Type script compile ts file into javascript.

The problems with ES 6:

When es6 was introduced, the node and browsers vendors were not ready to accept
es6 keywords
 let ,const never work in older node and browsers.

that time browers were supported only ES 5 version of js.

browsers were not ready that time, but develoers felt,and supported lot on es6.

Then how to run es 6 code on browsers which dont support.

The birth of "Transpilers"  : a special compilers which converts es6 to es5,

developer write code in es6 ---->transpiler-->es 5

eg: babel.js 
 higer version -to lower version
eg : tsc
 es6 to es5
 +
 type verification

         "ts compiler by default converts es6 code into es5."

let---------var

what if i dont to convert es6 to es 5, i want to keep same version?

////////////////////////////////////////////////////////////////////////////////////////

//literals -keyword
//firstName variable
//"Subramanian" is literal
//var firstName="Subramanian";
let firstName = "Subramanian";
console.log(`First Name ${firstName}`);

////////////////////////////////////////////////////////////////////////////////////////
types of literals:
..................
1.number
2.string
3.boolean
4.undefined
5.NaN
6.infinity
7.null
8.function
9.object

number,NaN,infity - number family

based on literals data types have designed.

Types
1.number
2.string
3.boolean
4.void -undefined
5.function
6.object
7.enum
8.Tuple
9.any


// variable declaration

//es 5 style
//var -keyword
//firstName variable
//"Subramanian" is literal
//var firstName="Subramanian";
//string literal
let firstName = "Subramanian";
let lastName = 'Murugan'
//console.log("First Name" + firstName);
console.log(`First Name ${firstName} ${lastName}`);
let title = 'IBM'
let htmlPage =`
    <html>
      <head>
       <title>
          ${title}
       </title>
     </head>
     <body>
      <h1>Welcome</h1>
     </body>
     </html>
`;
console.log(htmlPage);

//numbers : 64 bit size: aka double
let stockValue =1000;
console.log(`Stock value ${stockValue}`);
//undefined
let qty;
console.log(`Qty ${qty}`)
//NaN : it is runtime numerical errors
let totalStockValue = qty * stockValue;
console.log(`Total Stock value ${totalStockValue}`);
let avgStock = stockValue/ 0;
//div /0 : infinity
console.log(`Average Stock value ${avgStock}`);

//booleans
let isActive = true;
let isEnabled =false;

if(isActive){
    console.log('Active')
}else{
    console.log('It is not active')
}

if(isEnabled){
    console.log('isEnabled')
}else{
    console.log('It is not Enabled')
}
//advanced booleans ;
//in js everthing is true exepect the following values
/**
 * falsy values
 * 1.boolean false
 * 2.0
 * 3.undefined
 * 4.NaN
 * 5.null
 * 6.empty string ""/ ''
 */

let message=""; // undefined

if(message){
    console.log('You have message')
}else{
    console.log('You dont have message')
}
//function
let myfunc = function(){
    console.log('myfunc')
};
myfunc();

//null
let employee = null;

//object typel̥
let customer = {
    id:1,
    name:'subramanian'
};

//typeof operator : is used to know the type of varibles
console.log('type vertifications')
console.log(typeof firstName);
console.log(typeof stockValue);
console.log(typeof qty);
console.log(typeof totalStockValue); //NaN
console.log(typeof avgStock); //inifnity
console.log(typeof isEnabled);
console.log(typeof employee);
console.log(typeof customer);
console.log(typeof myfunc);

********************************************************************************************

Data types:

Data types in javascript is understood in run time only.

let/var/const i =10

let i=10;
typeof i - >number
i="hello"
typeof i - >string
i=true
typeof i - >boolean

///how to add types in source code ; how to identify type voilation;

syntax

1. var/let/const/this  variable:type = literal

Types provided by typescript:

Types
1.number
2.string
3.boolean
4.void -undefined
5.function
6.object
7.enum
8.Tuple
9.any


Data types can be introduced in mode

1.Explicit types

let firstName:string = "Subramanian";
console.log(`Name ${firstName}`);
//trigger compiler errors
//firstName =100;
let age:number = 18;
let isActive:boolean = true;


2.Type inference; you dont need to tell type during declaratio;implicit type

console.log(typeof myfunc);

********************************************************************************************

let variable:type = literal

int a =10;

a = "hello" ;;compiler will throw error : compile time vertification.


Ways of declaring :

1.expilicit
  let variableName:type = value

2.implicit : Type inference

   if any variable is assigned with specific type

 let age =20;
  now variable value is 20, so ts initailizes the type of age is number ,to be verified
in furture assignements

 age=90;
 age ="hess" ;;//error is thrown : type infered.

// type system

//Explicit type declaration
//strings
let firstName:string = "Subramanian";
console.log(`First Name ${firstName}`);
//firstName = 1000;
firstName = "Test";

//numbers
let stockValue:number =100;
stockValue =900;

//booleans
let isEnabled:boolean  =true;
isEnabled  =false;

////////////////////////////////////////////////////////////////////////////////
//implicit type declaration : Type inferance is enabled, based on initail value assigment
let age = 20;
console.log(`Age ${age}`)
age = 18;

//age = "hello"
let isActive= true;
//isActive = "test";
///////////////////////////////////////////////////////////////////////////////////

function:

//function:

function sayHello() {
    console.log('Hello');
}
sayHello();
////////////////
//params and args
function calculate(a: number, b: number) {
    let c = a + b;
    console.log(c);
}
calculate(10, 10);
//calculate("Subramanian","Murugan");
//default args
function multiply(a: number = 1, b: number = 1) {
    let c = a * b;
    console.log(c);
}
multiply(10, 10);
//what if i dont pass values
multiply();
//typescript default values:optional parameters;you can ignore params
function printName(name: string, message?: string) {
    console.log(`${name} ${message}`)
}
printName('Subramaian', 'hello');
printName('Subramaian');
//you can have either default args or optional params not both on same variable.

///////////////////////////////////////////////////////////////////////////////

//return values and types

function getStock(): number {
    return 100;
}
console.log(getStock())


function getName(): string {
    return "Hello";
}
console.log(getStock())
l̥
function getSomeValue(): any {
    return "Hello";
}
//no returne
function doSomething():void{
    console.log('void demo')
    //return; //void
}
doSomething();
///////////////////////////////////////////////////////////////////////////////////////////////

//Arrow funcitons

//es 6 function;
//function declaration syntax;

function sayHello() {
    console.log('hello')
}
sayHello();

//function as literal : es 5 syntax
const hai = function () {
    console.log('hai');
};
hai();
//function as literal : es6 syntax ; arrow functions

let calculate = () => {
    let c = 10 + 10;
    console.log(c);
};
calculate();
//with parametes and return values
let add = (a: number = 1, b: number = 1): number => {
    let c = a + b;
    return c;
}
console.log(add());
//if function has one line of body. you can remove {}
let printValue = () => console.log('printing')
printValue();
//only return statmenet ; we can remove {} and return statement
let multiply = (a: number = 1, b: number = 2): number => a * b;
console.log(multiply());

////////////////////////////////////////////////////////////////////////////////////////////////////

Object oriented Programming:

1.class syntax
2.Object as type
3.Encasulation
4.Modualrity


Object creations in js

1.constructor pattern
  -functions -  es 5 used to denote classe
  -class syntax

2.literal pattern


class syntax added in e6; 
type script even added new constructs inside class.

Basic class and create object
//object creations; using class
//object = state + behaviour ; instance members
class Employee {
    //instance variables
    id: number = 1;
    name: string = "subramanian";
    //instance methods
    calculateSalary(basicSalary: number = 100): number {
        return 1000 * basicSalary;
    }
}

const createObject = () => {
    //let is keyword;emp is just reference variable;new is keyword; 
    //Employee() is constructor call
    let emp = new Employee();
    //access object memebers
    console.log(`${emp.id} ${emp.name} ${emp.calculateSalary()}`)
}
createObject();
/////////////////////////////////////////////////////////////////////////////////////////////////////

//state initalizations;
//hardcoded
//after object creation
//constructor overloading.
class Employee {
    //hardcoded values
    //id: number = 1;
    // name: string = "subramanian";
    id: number;
    name: string;
    department: string;
    constructor(id: number = 1, name: string = 'Subramanian', department?: string) {
        this.id = id;
        this.name = name;
        this.department = department;
    }
    //instance methods
    calculateSalary(basicSalary: number = 100): number {
        return 1000 * basicSalary;
    }
}

const createObject = () => {
    //let is keyword;emp is just reference variable;new is keyword; 
    //Employee() is constructor call
    let emp = new Employee();
    //access object memebers
    console.log(`${emp.id} ${emp.name} ${emp.department} ${emp.calculateSalary()}`)
    //after object creation
    emp.id = 19;
    emp.name = 'ram'
    console.log(`${emp.id} ${emp.name} ${emp.department} ${emp.calculateSalary()}`)

    emp =new Employee(23,'karthik','software');
    console.log(`${emp.id} ${emp.name} ${emp.department} ${emp.calculateSalary()}`)

}
createObject();


////////////////////////////////////////////////////////////////////////////////////////////

Encasulation:

What is encasulation?

To Prevent code sharing from code to another.

code - collection of classes, variables,functions,......

code is represented inside file.

pl provides keywords to ensure that , how  we can allow the code to be shared

TS provides keywords to prevent code sharing
 
 -public - any where
 -private - with in class 
 -protected - with in class + inheritance

only class members are public/private/protected.

if you declare any member(var,methods) => by default is public.



//encasulation; private,public,protected
//default is public 

//public 
class Employee {
    //here all members are public ; public keyword is not neccessary
    id: number;
    public name: string;
    constructor(id: number = 1, name: string = 'Subramanian') {
        this.id = id;
        this.name = name;
    }
    public calculateSalary(): number {
        return 1000;
    }
}
let emp = new Employee();
//access object memebers
console.log(`${emp.id} ${emp.name} ${emp.calculateSalary()}`)

class User {
    //here all members are public ; public keyword is not neccessary
    private id: number;
    private name: string;
    constructor(id: number = 1, name: string = 'Subramanian') {
        this.id = id;
        this.name = name;
    }
    public getInfo() {
        return `${this.id} ${this.name}`
    }

}

let user = new User();
//access object memebers
console.log(`${user.getInfo()}`)
///////////////////////////////////////////////////////////////////////////////////////////////////////


//advanced usecase of private,public

// class Order {
//     orderId: number;
//     invoiceValue: number;
//     productName: string;
//     constructor(orderId: number, invoiceValue: number, productName: string) {
//         this.orderId = orderId;
//         this.invoiceValue = invoiceValue;
//         this.productName = productName;
//     }

// }
// class Order {
//     //convert local variables into instance variable by adding either public or private
//     constructor(public orderId?: number, public invoiceValue?: number, public productName?: string) {
//         this.orderId = orderId;
//         this.invoiceValue = invoiceValue;
//         this.productName = productName;
//     }
// }

class Order {
    //if local and istance variable initalzation ; remove inialization code
    constructor(public orderId?: number, private invoiceValue?: number,
        public productName?: string) { }
}
let order = new Order(1, 1000, 'toys')
console.log(order);
//console.log(order.invoiceValue)

//////////////////////////////////////////////////////////////////////////////////////////////////////

Hierachy: Object relationship:
..............................

1.HAS-A - Composition ; Dependance Injection; DI
2.IS-A - Inheritance


//Dependence injection.

class Product {
    constructor(public id: number = 1, public name: string = 'default') { }
}
class Order {
    //has-a 
    constructor(public orderId: number = 1, public product?: Product) {
    }
}
class Dog {
    constructor(){}
}

let order = new Order(100,new Product());
console.log(order);

//type collation is not possible; can identfied during compile time; so we can build
//enterprise systems
//let order1 = new Order(100,new Dog());
//console.log(order)

////////////////////////////////////////////////////////////////////////////////////////////////////////
IS-A : Inheritance:

implementation
1.class based inheritance
  1.concret class
  2.abstract class - ts feature
  
2.interfaces - ts features



Basic concret class inheritance:
................................

class Account {
    constructor() {
        console.log('Account constructor is called')
    }
    public calculateInterest(): number {
        return 10;
    }
}
class SavingsAccount extends Account {
    constructor() {
        super();
        console.log('SavingsAccount constructor is called')
    }
    //overriding;re defining the methods
    public calculateInterest(): number {
        return 100 * super.calculateInterest();
    }
}

let account = new SavingsAccount();
console.log(account.calculateInterest())

/////////////////////////////////////////////////////////////////////////////////////////////////////


interface Transaction {
    withdraw(): number;
    deposit(amount: number, year: number): number;
}

abstract class Account implements Transaction {
    protected accountNo: string;
    constructor(accountNo: string) {
        this.accountNo = accountNo;
        console.log('Account constructor is called')
    }
    public calculateInterest(): number {
        return 10;
    }
    public withdraw(): number {
        return 100;
    }
    //dont want provide implementation for deposit
    abstract deposit(amount: number, year: number): number;
    //new
}
class SavingsAccount extends Account {
    constructor(accountNo: string = 'A0001') {
        super(accountNo);
        console.log('SavingsAccount constructor is called' + accountNo)
    }
    //overriding;re defining the methods
    public calculateInterest(): number {
        return 100 * super.calculateInterest();
    }
    public deposit(amount: number, year: number): number {
        return amount * 1000;
    }
}

let account = new SavingsAccount('B0007888');
console.log(account.calculateInterest())

/////////////////////////////////////////////////////////////////////////////////////////////////////////

Literal Pattern and Object types:
.................................

//Literal Objects
//used to represent domain models / mvc - model object

//class as type; in general classes are used to create objects;
//in ts; class can be used to act as type and create object

class User {
    id: number;
    name: string;
    email?: string;
    userName?: string;
    password?: string;
}
//Object types are not only for types but member existence verification
let user: User = {
    id: 1,
    name: 'Subramanian',
    email: 'admin@abc.com',
    userName: 'foo',
    password: 'bar'
};
console.log(user)

//i have req; i need only 3 properties
let newUser: User = {
    id: 1,
    name: 'Subramanian',
    email: 'admin@abc.com'
};

//interface as type: Generic type for many Objects
interface AccountType {
    id: number;
    name: string;
    balance?: number;
}
let sb: AccountType = {
    id: 1,
    name: 'Test',
    balance: 20
}

let loanaccount: AccountType = {
    id: 1,
    name: 'Test',
    balance: 20
}
//type
type CustomerType = {
    id:number,
    name:string;
    city?:string;
};
let cust:CustomerType = {
   id:1,
   name:"Customer",
   city : 'Coimbatore'
}

////////////////////////////////////////////////////////////////////////////////
interface OrderType {
    id?: number;
    value?: number;
}

class Order {
    constructor(public id?: number, public value?: number) {

    }
}
//let myorder:OrderType = new Order();
let myorder = new Order() as OrderType;
let myorder1 = new Order() as any;
/////////////////////////////////////////////////////////////////////////////////////////////////////

Arrays and type:
////////////////
//arrays
///1.normal syntax
//2.generics syntax

//normal
//array of numbers
let list: number[] = [1, 2, 3, 5];
let names: string[] = ["subramanian", "arun", "karthik"];
//array of customers / array or products
class Product {
    id: number;
    name: string;
    qty?: number;
    price?: number;
    inStock?: boolean;
}
let products: Product[] = [
    { id: 1, name: 'a', qty: 10, price: 100, inStock: true },
    { id: 1, name: 'a', qty: 10, price: 100, inStock: true },
    { id: 1, name: 'a', qty: 10, price: 100, inStock: true }
]
//syntax generics; Array<T>
let stocks: Array<number> = [1, 2, 3, 5];

let products1: Array<Product> = [
    { id: 1, name: 'a', qty: 10, price: 100, inStock: true },
    { id: 1, name: 'a', qty: 10, price: 100, inStock: true },
    { id: 1, name: 'a', qty: 10, price: 100, inStock: true }
]

//////////////////////////////////////////////////////////////////////////////////////////////////

Custom Generics:
// class Queue {
//     private data = [];
//     push = item => this.data.push(item);
//     pop = () => this.data.shift();
// }
// const queue = new Queue();
// queue.push(10.78);
// queue.push("111.8999");
// console.log(queue.pop().toFixed(1));
// console.log(queue.pop().toFixed(1)); 

//Add generincs
class Queue<T> {
    private data = [];
    push = (item: T) => this.data.push(item);
    pop = (): T => this.data.shift();
}
const numQueue = new Queue<number>();
numQueue.push(10.78);
//numQueue.push("23.899");
console.log(numQueue.pop().toFixed(1));

Note: Typescript added generics for lot of built in javascript objects

-Array
-Promise
etc....
/////////////////////////////////////////////////////////////////////////////////////////////////////

javascript modularity:

&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&

Modularity:
..........

In java Modularity , is presented via "Packages"

Package organize the code  logically.

Customer.java

package com.ibm.cms

public class Customer{}

Java organizes code folders and files Physically.

d:/javaapps/src/
    com/ibm/cms/Customer.java


What about javascript Modularity?

 Javascript is file based modularity physically
 but logically there is no such modularity at language level.

 collection of variable declarations and function.

Once js started growing in large scale, dev struck to organize code.

2000, Smart developers started thinking about how to modualrize js code.
 

Module design patterns came.

1.Namespace design pattern : 2000 : jquery
2.AMD -Async Module Defintion : dojo
---------------------------------------------------------
3.CJS - Common JS =  namespace + amd
4.ES 6 Module design pattern  = amd + cjs
------------------------------------------------------------
5.System = AMD = CJS + ES 6
6.UMD = NAMESPACE + AMD + CJS = ES 6

//////////////////////////////////////////////////////////////////////////////////////////////////////

ES 6 Module design pattern:

-based on amd + cjs + namespace
-focus to share code and link files


code:
 -variables
 -functions
 -classes
 

How to link files?

import

How to share code?

export , export default

By default, you cant run es6 modules on browser?
Then how to run?

We need to add loader and linker? How ? via lib called "webpack"

How to use webpack?

-install
-bundle
-run

install:
npm install webpack webpack-cli --save-dev

webpack.config.js

const path = require('path');

module.exports = {
    entry: './build/index.js',
    output: {
        filename: 'bundle.js',
        path: path.resolve(__dirname, 'dist'),
    },
};

bundle:
package.json
    "build" : "webpack --watch"


CodeL

//variable to be shared
export const message: string = 'Hello';
export const count: number = 10;
export const skills: Array<string> = ['java', 'ts', 'MicroServices'];
export const add = (a: number, b: number) => a + b;
export const address = {
    city: 'coimbatore',
    state: 'Tamil Nadu'
}

//import
import { message, count, skills, add, address } from './Mylib';

console.log(message,count,skills,add(10,10),address);

//////////////////////////////////////////////////////////////////////////////////////////////////////////

how to export classes?


export class OrderType {
    id: number;
    value: number;
}

import { OrderType } from "../types/Order.type";

export const ORDERS: Array<OrderType> = [
    { id: 1, value: 2000 },
    { id: 2, value: 7000 },
    { id: 3, value: 4000 },
];

import { OrderType } from "../types/Order.type";
import { ORDERS } from '../mock-data/Orders.mock';


export class OrderService {
    constructor() {
        console.log('Order Service is being initalized')
    }
    public findAll(): Array<OrderType> {
        return ORDERS;
    }
}

import { OrderService } from './services/Order.service';

function createOrder() {
    let orderService = new OrderService();
    console.log(orderService.findAll());
}
createOrder();













